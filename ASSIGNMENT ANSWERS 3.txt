ASSIGNMENT QUESTION 3

QUESTION 1

def three_sum_closest(arr, target):
    arr.sort()
    css = float(99999999999)

    for x in range(len(arr) - 2):
        y = x + 1
        z = len(arr) - 1

        while y < z:
            cs = arr[x] + arr[y] + arr[z]

            if abs(cs - target) < abs(css - target):
                css = cs

            if cs > target:
                z -= 1
            elif cs < target:
                y += 1
            else:
                return target

    return css

print(three_sum_closest([-1,2,1,4], 1))



QUESTION 2

def p2(nums, target):
    nums.sort()
    n = len(nums)
    result = []

    for a in range(n - 3):
        if a > 0 and nums[a] == nums[a - 1]:
            continue

        for b in range(a + 1, n - 2):
            if b > a + 1 and nums[b] == nums[b - 1]:
                continue

            l = b + 1
            r = n - 1

            while l < r:
                sum = nums[a] + nums[b] + nums[l] + nums[r]

                if sum == target:
                    result.append([nums[a], nums[b], nums[l], nums[r]])

                    while l < r and nums[l] == nums[l + 1]:
                        l += 1
                    while l < r and nums[r] == nums[r - 1]:
                        r -= 1

                    l += 1
                    r -= 1
                elif sum < target:
                    l += 1
                else:
                    r -= 1

    return result

print(p2([1,0,-1,0,-2,2], 0))


QUESTION 3

def p3(nums):
    n = len(nums)
    i = n - 2

    while i >= 0 and nums[i] >= nums[i + 1]:
        i -= 1

    if i >= 0:
        j = n - 1
        while j > i and nums[j] <= nums[i]:
            j -= 1
        nums[i], nums[j] = nums[j], nums[i]

    l = i + 1
    r = n - 1
    while l < r:
        nums[l], nums[r] = nums[r], nums[l]
        l += 1
        r -= 1

nums = [1,2,3]
p3(nums)
print(nums)


QUESTION 4

def p4(nums, target):
    l = 0
    r = len(nums) - 1

    while l <= r:
        m = l + (r - l) // 2

        if nums[m] == target:
            return m
        elif nums[m] < target:
            l = m + 1
        else:
            r = m - 1

    return l

nums=[1,3,5,6]
target = 5

print(p4(nums, target))


QUESTION 5

def p5(digits):
    n = len(digits)
    carry = 1

    for i in range(n - 1, -1, -1):
        digits[i] += carry

        if digits[i] < 10:
            carry = 0
            break
        else:
            digits[i] = 0

    if carry == 1:
        digits.insert(0, 1)

    return digits

digits = [9,9,9]
print(p5(digits))


QUESTIN 6

def p6(nums):
    val=nums[0]
    for i in range(1, len(nums)):
        val = val^nums[i] 
    return val 
    
nums=[1,2,2]
print(p6(nums))



QUESTION 7

def p7(nums, lower, upper):
    r = []
    p = lower - 1

    for num in nums + [upper + 1]:
        if num - p >= 2:
            r.append([p + 1, num - 1])
        p = num

    return r

nums=[0,1,3,50,75]
lower = 0
upper = 99

print(p7(nums, lower, upper))


QUESTION 8

def p8(intervals):
    intervals.sort(key=lambda x: x[0])  

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i-1][1]:
            return False  
    return True  

intervals = [[0,30],[5,10],[15,20]]
print(p8(intervals))